Implements:
* Automatic parenthesis matching.

Applying the patch:
1. Move/copy the patchfile to

   p9p/../src/cmd/

2. cd to p9p/../src/cmd/acme/
3. run

   patch -Np1 < ../patchfile 2>&1 | tee log

Building acme:
1. cd to p9p/../src/cmd/amce/
2. run

   ../../../bin/9 mk install 2>&1 | tee log

3. (Optionial) when the build was succesful or you want to
   start over from scratch:

   ../../../bin/9 mk clean

Common subdirectories: acme.orig/.git and acme.paren/.git
diff -X diff.exclude -Nua acme.orig/.gitignore acme.paren/.gitignore
--- acme.orig/.gitignore	1970-01-01 01:00:00.000000000 +0100
+++ acme.paren/.gitignore	2016-02-19 14:14:15.000000000 +0100
@@ -0,0 +1,5 @@
+# Exclude everything, except acme/
+/*
+!/acme
+!README.md
+
diff -X diff.exclude -Nua acme.orig/README.md acme.paren/README.md
--- acme.orig/README.md	1970-01-01 01:00:00.000000000 +0100
+++ acme.paren/README.md	2016-02-19 14:16:48.000000000 +0100
@@ -0,0 +1,49 @@
+# Automatic parenthesis matching patch for the acme text editor.
+
+## File
+
+acme/patch-acme-paren
+
+## Description
+
+This is a patch for plan9port's acme which implements automatic
+parenthesis matching. The characters that are matched, are the normal ones
+already supported by acme's paren-matching. 
+
+Currently, parenthesis matching is hardcoded, and can not be turned off, though
+it should not be difficult to implement a commandline option yourself.
+
+
+## Notes
+
+- With acme's default colours, the highlighting is hardly noticable. You may
+  need to change the (highlighting) colours in **acme.c**.  For example, make
+  the default yellow for highlighting a bit darker.
+
+- The modified file is **text.c**, see the patch.
+
+
+Modified from and tested with: plan9port version 20140306.
+
+
+## Install
+
+- Move/copy the patchfile to
+
+     ../src/cmd/
+
+- cd to
+    ../src/cmd/acme/
+
+- apply the patch
+
+    $ patch -Np1 < ../patchfile 2>&1 | tee log
+
+- if **tee(1)** is not available, or you don't want to use it:
+
+    $ patch -Np1 < ../patchfile 2>&1
+
+
+## See also:
+[https://github.com/9fans/plan9port](https://github.com/9fans/plan9port)
+
Common subdirectories: acme.orig/acme and acme.paren/acme
Common subdirectories: acme.orig/mail and acme.paren/mail
diff -X diff.exclude -Nua acme.orig/text.c acme.paren/text.c
--- acme.orig/text.c	2013-10-23 11:00:07.000000000 +0200
+++ acme.paren/text.c	2016-04-01 20:23:04.000000000 +0200
@@ -653,6 +653,10 @@
 	return rp;
 }
 
+static int findmatch = 0;
+static uint oldpos = 0;
+static uint matchp0, matchp1;
+
 void
 texttype(Text *t, Rune r)
 {
@@ -666,6 +670,34 @@
 		return;
 	if(t->what == Tag)
 		t->w->tagsafe = FALSE;
+   
+	/* Clear (possible) selection if we did parenmatching. */
+	if (findmatch == 1) {
+		typecommit(t);
+		/*
+		 * Bug: If the user selects the paren-match selection itself--
+		 *    selects the selection-- we _will_ return to oldpos,
+		 *    since this `new' selection is the same as the one that
+		 *    was a result of paren-matching.  This implementation
+		 *    cannot tell the difference. No select-and-type-to-overwrite
+		 *    is possible in this case. Harmless and probably a rare situation,
+		 *    but a bug nonetheless.
+		 *
+		 *   :/findmatch\(#/ 
+		 */
+		if(t->q1 < t->file->b.nc && t->fr.p0 != t->fr.p1) {
+			if(t->fr.p0 == matchp0 && t->fr.p1 == matchp1){
+				textsetselect(t, t->q1, t->q1);
+				textshow(t, oldpos, oldpos, TRUE);
+			}
+		}else{
+			textsetselect(t, t->q1, t->q1);
+			textshow(t, t->q1, t->q1, TRUE);
+		}
+		/* set to current */
+		oldpos = t->q1;
+		findmatch = 0;
+	}
 
 	nr = 1;
 	rp = &r;
@@ -879,6 +911,16 @@
 			}
 		}
 		break; /* fall through to normal code */
+	
+	case ')':  /* fallthrough */
+	case '}':  /* fallthrough */
+	case ']':  /* fallthrough */
+	case '>':  /* fallthrough */
+	case '\'': /* fallthrough */
+	case '"':  /* fallthrough */
+	case '`': 
+		findmatch = 1;
+		break;
 	}
 	/* otherwise ordinary character; just insert, typically in caches of all texts */
 	for(i=0; i<t->file->ntext; i++){
@@ -915,6 +957,37 @@
 	if(r=='\n' && t->w!=nil)
 		wincommit(t->w, t);
 	t->iq1 = t->q0;
+
+	if(findmatch == 1){   /* :/findmatch\(#/ */
+		/*
+		 * Put cursor on the left ("inside") of paren-char.
+		 */
+		q0 = t->q0-1;
+		q1 = t->q1-1;
+		oldpos = t->q1;
+		typecommit(t);
+		textdoubleclick(t, &q0, &q1);
+ 		/* found a matching character */
+		if(q0 != q1){
+			/*
+			 * If the matching char falls outside the visual
+			 * text (is `invisible') do nothing.
+			 */
+			if(q0 < t->org){
+				findmatch=0;
+			}else{
+				textsetselect(t, q0-1, q0);
+				/* 
+				 * Set matchN to fr.p0/p1 not q0-1/q0, since
+				 * t->q0/q1 may be off. See textsetselect().
+				 */ 
+				matchp0=t->fr.p0;
+				matchp1=t->fr.p1;
+			}
+		}
+	}else{ /* redundant, but just to be sure */
+		findmatch = 0;
+	}
 }
 
 void
